Set Warnings "-notation-overridden,-intuition-auto-with-star".

Require Import Preamble.

Require Import Defs.Lc.
Require Import Defs.Sub.

Require Export Semantics.Projable.

(*** Def *)

Definition ùì° := relation Tm.

Definition rho_elem := (T * T * ùì°).

Definition rho_elem_proj1 : rho_elem -> T := fst ‚àò fst.
Definition rho_elem_proj2 : rho_elem -> T := snd ‚àò fst.
Definition rho_elem_proj__R : rho_elem -> ùì° := snd.

Definition rho := list (rho_elem * skvar).

Ltac ind_rho œÅ := induction œÅ as [|[[[?œÑ1 ?œÑ2] ?R] ?Œ±]].
Ltac rho_destr œÅ := destruct œÅ as [|[[[?œÑ1 ?œÑ2] ?R] ?Œ±] œÅ].

Definition map_snd [A B C:Type] (f:A -> B) : list (A*C) -> list (B*C) :=
  map (fun (p:(A*C)) => let (x, y) := p in (f x, y)).

Definition rho_proj1 : rho -> Sub := map_snd rho_elem_proj1.
Definition rho_proj2 : rho -> Sub := map_snd rho_elem_proj2.
#[derive(equations=no)] Equations rho_proj__R (œÅ:rho) (Œ±:skvar) : option ùì° :=
  rho_proj__R [] _ := None;
  rho_proj__R ((tri, Œ≤)::œÅ') Œ± := if eq_skvar Œ± Œ≤ then Some (rho_elem_proj__R tri) else rho_proj__R œÅ' Œ±.

(*** Projable *)
#[export] Instance rho_proj1able : proj1able rho Sub := { œÄ1 := rho_proj1 }.
#[export] Instance rho_proj2able : proj2able rho Sub := { œÄ2 := rho_proj2 }.
#[export] Instance rho_projRable : projRable rho skvar (option ùì°) := { œÄ__R := rho_proj__R }.

Lemma œÄ1_rho_app_distr : forall œÅ1 œÅ2,
    œÄ1 (œÅ1 ++ œÅ2) = œÄ1 œÅ1 ++ œÄ1 œÅ2.
Proof. intros. ind_rho œÅ1. crush. simpl+. crush. Qed.
Lemma œÄ2_rho_app_distr : forall œÅ1 œÅ2,
    œÄ2 (œÅ1 ++ œÅ2) = œÄ2 œÅ1 ++ œÄ2 œÅ2.
Proof. intros. ind_rho œÅ1. crush. simpl+. crush. Qed.
#[export] Hint Rewrite œÄ1_rho_app_distr œÄ2_rho_app_distr : sub_dist.

Definition dom_rhodom_list : rho -> list skvar := map snd.

(*** dom_rho *)
Module dom_rho_alg <: List_to_Set_alg TaggedAtom AtomSetImpl.
  Definition elt := (rho_elem * atom)%type.
  Definition f : elt -> atoms := (AtomSetImpl.singleton ‚àò snd).
End dom_rho_alg.
#[export] Hint Unfold dom_rho_alg.elt dom_rho_alg.f : algs.
Module Export dom_rho := List_to_Set TaggedAtom AtomSetImpl dom_rho_alg.
Notation dom_rho := dom_rho.List_to_Set.

Fact proj1_dom_rho_Sub : forall œÅ, dom_Sub (œÄ1 œÅ) ‚â° dom_rho œÅ.
Proof. intros. ind_rho œÅ; simpl+; crush. Qed.
Fact proj2_dom_rho_Sub : forall œÅ, dom_Sub (œÄ2 œÅ) ‚â° dom_rho œÅ.
Proof. intros. ind_rho œÅ; simpl+; crush. Qed.

Fact proj1_rho_dom_Sub_hint : forall Œ± œÅ,
    Œ± ‚àâ dom_rho œÅ
  -> Œ± ‚àâ dom_Sub (œÄ1 œÅ).
Proof. intros. rewrite proj1_dom_rho_Sub. crush. Qed.
Fact proj2_rho_dom_Sub_hint : forall Œ± œÅ,
    Œ± ‚àâ dom_rho œÅ
  -> Œ± ‚àâ dom_Sub (œÄ2 œÅ).
Proof. intros. rewrite proj2_dom_rho_Sub. crush. Qed.
#[export] Hint Resolve proj1_rho_dom_Sub_hint proj2_rho_dom_Sub_hint  : core.

Lemma proj12_dom_rho_Sub : forall Œ≥,
    dom_rho Œ≥ ‚â° dom_Sub (œÄ1 Œ≥) ‚à™ dom_Sub (œÄ2 Œ≥).
Proof. intros. rewrite proj1_dom_rho_Sub. rewrite proj2_dom_rho_Sub. fsetdec. Qed.
#[export] Hint Rewrite proj12_dom_rho_Sub : logrel_E_rho.
Ltac split_rho := autorewrite with logrel_E_rho in *.

(*** codom_rho *)
Module skvars_codom_rho_alg <: List_to_Set_alg TaggedAtom AtomSetImpl.
  Definition elt := (rho_elem * skvar)%type.
  Definition f : elt -> atoms := fun elt => (fsk ‚àò fst ‚àò fst ‚àò fst) elt ‚à™ (fsk ‚àò snd ‚àò fst ‚àò fst) elt.
End skvars_codom_rho_alg.
#[export] Hint Unfold skvars_codom_rho_alg.elt skvars_codom_rho_alg.f : algs.

Module Export Skvars_codom_rho := List_to_Set TaggedAtom AtomSetImpl skvars_codom_rho_alg.
Notation skvars_codom_rho := Skvars_codom_rho.List_to_Set.

Lemma proj1_skvars_codom_rho_Sub : forall œÅ, skvars_codom_Sub (œÄ1 œÅ) ‚äÜ skvars_codom_rho œÅ.
Proof. intros. ind_rho œÅ. crush. simpl+. fsetdec. Qed.
Lemma proj2_skvars_codom_rho_Sub : forall œÅ, skvars_codom_Sub (œÄ2 œÅ) ‚äÜ skvars_codom_rho œÅ.
Proof. intros. ind_rho œÅ. crush. simpl+. fsetdec. Qed.

Fact proj1_skvars_codom_rho_Sub_hint : forall Œ± œÅ,
    Œ± ‚àâ skvars_codom_rho œÅ
  -> Œ± ‚àâ skvars_codom_Sub (œÄ1 œÅ).
Proof. intros. rewrite proj1_skvars_codom_rho_Sub. crush. Qed.
Fact proj2_skvars_codom_rho_Sub_hint : forall Œ± œÅ,
    Œ± ‚àâ skvars_codom_rho œÅ
  -> Œ± ‚àâ skvars_codom_Sub (œÄ2 œÅ).
Proof. intros. rewrite proj2_skvars_codom_rho_Sub. crush. Qed.
#[export] Hint Resolve proj1_skvars_codom_rho_Sub_hint proj2_skvars_codom_rho_Sub_hint  : core.



(*** Lc *)
Definition lc_rho (œÅ:rho) : Prop := lc(œÄ1 œÅ) /\ lc(œÄ2 œÅ).
#[export] Instance lcable_rho : lcable rho := { lc := lc_rho }.

Fact lc_rho_empty :
    lc([]:rho).
Proof. do 3 unfolds. simpl+. crush. Qed.
#[export] Hint Resolve lc_rho_empty : core.

Fact lc_œÅ_œÄ1 : forall œÅ,
    lc(œÅ)
  -> lc(œÄ1 œÅ).
Proof. crush. Qed.
Fact lc_œÅ_œÄ2 : forall œÅ,
    lc(œÅ)
  -> lc(œÄ2 œÅ).
Proof. crush. Qed.
#[export] Hint Resolve lc_œÅ_œÄ1 lc_œÅ_œÄ2 : core.

Lemma rho_lc_cons : forall œÑ1 œÑ2 R a œÅ,
    lc(œÑ1)
  -> lc(œÑ2)
  -> lc(œÅ)
  -> lc ((œÑ1, œÑ2, R, a) :: œÅ).
Proof. intros. split; simpl+; apply lc_Sub_cons; eauto. Qed.

Lemma cons_rho_lc : forall œÑ1 œÑ2 R a œÅ,
    lc ((œÑ1, œÑ2, R, a) :: œÅ)
  -> lc(œÑ1)
  /\ lc(œÑ2)
  /\ lc(œÅ).
Proof. introv [LC1 LC2]. simpl+ in *. splits; eauto. split; eauto. Qed.
