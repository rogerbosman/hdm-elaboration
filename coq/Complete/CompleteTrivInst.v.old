Set Warnings "-notation-overridden".

Require Import Preamble.
Require Import Preamble.Tag.
Require Import Defs.HdmLems.

Require Import LibHyps.LibHyps.

Require Import Defs.E.
Require Import Defs.EInst.
Require Import Defs.ERels.
Require Import Defs.FrA.
Require Import Defs.Foralls.
Require Import Defs.Inf.
Require Import Defs.Lc.
Require Import Defs.List.
Require Import Defs.Sub.
Require Import Defs.Subst.
Require Import Defs.TmTy.
Require Import Defs.WfE.

Require Import Complete.PrincipalTyping.
(* Require Import Complete.CompleteSS. *)
(* Require Import Complete.CompleteInst. *)
Require Import Complete.CompleteUnit.
(* Require Import Complete.CompleteLet. *)

Require Import Semantics.FundPropAdmit.

Inductive TAInst : A -> A -> Sub -> Prop :=    (* defn AInst *)
 | TAInst__Nil :
     TAInst nil nil   nil
 | TAInst__C : forall (a__alg:A) (α__alg:skvar) (a__dec:A) (α__dec:skvar) (θ:Sub)
     (AINST: TAInst a__alg a__dec θ),
     TAInst (α__alg :: a__alg) (α__dec :: a__dec) ((T__Var_f α__dec, α__alg) :: θ)
with TEInst : E -> Sub -> E -> E -> Sub -> Prop :=    (* defn TEInst *)
 | TEInst__Nil : forall (ψ:E) (θ:Sub),
     TEInst ψ θ E__Nil E__Nil  nil
 | TEInst__A : forall (ψ:E) (θ1:Sub) (ψ__alg:E) (a__alg:A) (ψ__dec:E) (a__dec:A) (θ3 θ2:Sub)
     (EINST: TEInst ψ θ1 ψ__alg ψ__dec θ2)
     (AINST: TAInst  a__alg a__dec θ3),
     TEInst ψ θ1 (E__A ψ__alg a__alg) (E__A ψ__dec a__dec)  ( θ3  ++  θ2 )
 | TEInst__S : forall (ψ:E) (θ1:Sub) (ψ__alg:E) (x:var) (σ__alg:Sc) (ψ__dec:E) (θ2:Sub)
     (EINST: TEInst ψ θ1 ψ__alg ψ__dec θ2),
     TEInst ψ θ1 (E__Var ψ__alg x σ__alg) (E__Var ψ__dec x  ( ⟦    ( θ2  ++  θ1 )    ▹  σ__alg  ⟧ ) ) θ2
 | TEInst__O : forall (ψ:E) (θ1:Sub) (ψ__alg:E) (t__alg:Tm) (a__alg:A) (σ__alg:Sc) (ψ__dec:E) (θ3 θ2:Sub) (a__dec:A)
     (EINST: TEInst ψ θ1 ψ__alg ψ__dec θ2)
     (AINST: TAInst  a__alg a__dec θ3),
     TEInst ψ θ1 (E__O ψ__alg t__alg a__alg σ__alg) (E__O ψ__dec  ( ⟦    ( θ3  ++   ( θ2  ++  θ1 )  )    ▹  t__alg  ⟧ )  a__dec  ( ⟦    ( θ3  ++   ( θ2  ++  θ1 )  )    ▹  σ__alg  ⟧ ) ) θ2.

#[export] Hint Constructors TAInst TEInst : core.

Notation  "{ ψ1 , θ1 } ⊢te ψ2 ⤳ { ψ3 , θ2 }" := (TEInst ψ1 θ1 ψ2 ψ3 θ2) (at level 50, format "{ ψ1 ,  θ1 }  ⊢te  ψ2  ⤳  { ψ3 ,  θ2 }" ) : type_scope.

Notation TEInst' ψ1 ψ2 := (exists (θ:Sub), {•, []} ⊢te ψ1 ⤳ {ψ2, θ}).
Notation  "ψ1 ⤳t' ψ2" := (TEInst' ψ1 ψ2) (at level 70(* , format "{ ein ,  subin }  ⊢  ψ1  ⤳  { ψ2 ,  sub }" *) ) : type_scope.

Notation  "a1 ⤳ta a2 , θ" := (TAInst a1 a2 θ) (at level 50) : type_scope.

Theorem TAInst_split : forall a1 a2 a__dec θ,
    (a2 ++ a1) ⤳ta a__dec , θ
  -> exists a__dec1 a__dec2 θ1 θ2,
          a__dec = a__dec2 ++ a__dec1
        /\ θ = θ2 ++ θ1
        /\ a1 ⤳ta a__dec1 , θ1
        /\ a2 ⤳ta a__dec2 , θ2.
Proof.
  introv TAINST. gen θ a__dec. ind_a a2; intros. exists. crush.
  inverts TAINST. forwards [?a [?a [?θ [?θ [?EQ [?EQ [?TAINST ?TAINST]]]]]]]: IHa2. eassumption.
  subst. exists a (α__dec :: a0) θ ((T__Var_f α__dec, α) :: θ1). splits; crush.
Qed.

Ltac TAInst_split H :=
  let EQ1 := fresh "EQ" in
  let EQ2 := fresh "EQ" in
  apply TAInst_split in H; destruct H as [?a [?a [?θ [?θ [EQ1 [EQ2 [?TAINST ?TAINST]]]]]]];
    match type of EQ1 with
      | (?x = _) => subst x
    end.

Ltac inv_TAInst :=
    match goal with
    | [ H : TAInst nil      _ |- _ ] => inverts H
    | [ H : TAInst []       _ |- _ ] => inverts H
    | [ H : TAInst [_]      _ |- _ ] => inverts H
    | [ H : TAInst (_ :: _)  _ |- _ ] => inverts H
    | [ H : TAInst (_ ++ _) _ |- _ ] => TAInst_split H
  end.

Ltac inv_TEInst_ :=
  repeat match goal with
    | [ H : _ ⤳t' _ |- _ ] => destruct H as [?θ H]
    | [ H : {_, _}⊢te E__Nil ⤳ {_, _} |- _ ] => inverts H
    | [ H : {_, _}⊢te _ ::a _ ⤳ {_, _} |- _ ] => inverts H
    | [ H : {_, _}⊢te _ ::x _ :- _ ⤳ {_, _} |- _ ] => inverts H
    | [ H : {_, _}⊢te _ ::o ⦇_ ▸ ⟨_⟩ _⦈ ⤳ {_, _} |- _ ] => inverts H
  end.
Ltac inv_TEInst := repeat inv_TEInst_.
Ltac inv_TEInst' := repeat (try inv_TEInst; try inv_TAInst); autorewrite with appnil in *; cleanhyps.

Lemma AInst_skvars_codom_Sub : forall a1 a2 θ,
    a1 ⤳ta a2, θ
  -> skvars_codom_Sub θ = varl a2.
Admitted.

Lemma AInst_close_Sc_wrt_A : forall σ a1 a2 θ,
    a1 ⤳ta a2, θ
  -> a1 ### varl a2
  -> a2 ### (fv__α(σ))
  -> ∀ a2 ⬪ ⟦θ ▹ σ⟧ = ∀ a1 ⬪ σ.
Proof.
  introv TAINST FR1 FR2. induction TAINST. crush.
  simpl+. fequals. dist. rewrite <- IHTAINST.
  2:apply FrA_cons1 in FR1; FrA_L_sub.
  2:apply FrA_cons1 in FR2; assumption.
  rewrite <- subst_skvar_Sc_close_Sc_wrt_A.
  symmetry. apply close_Sc_wrt_T_subst_skvar_Sc.
  (** well-formedness, *)
  rewrite fsk_Sc_close_Sc_wrt_T. rewrite fsk_close_Sc_wrt_A. rewrite Sub_app_Sc_fsk'.
  erewrite AInst_skvars_codom_Sub. 2:eassumption.
  apply FrA_cons2 in FR2. fsetdec.
  crush. unfold not. intros. unfolds in FR1. applys in_disj α__alg. apply FR1.
  reldec. reldec. simpl+. intro. apply FrA_props1 in FR2. inverts FR2. crush.
Qed.

Corollary AInst_close_Sc_wrt_A' : forall τ a1 a2 θ,
    a1 ⤳ta a2, θ
  -> a1 ### varl a2
  -> a2 ### (fv__α(τ))
  -> ∀ a2 ⬪ S__T ⟦θ ▹ τ⟧ = ∀ a1 ⬪ S__T τ.
Proof.
  intros. forwards: AInst_close_Sc_wrt_A (S__T τ). eassumption. eassumption. simpl+. eassumption.
  applys_eq H2.
Qed.

Lemma Sub_app_Sc_close_Sc_wrt_T : forall θ σ α,
    lc(θ)
  -> α ∉ dom_Sub θ
  -> α ∉ skvars_codom_Sub θ
  -> ⟦θ ▹ close_Sc_wrt_T α σ⟧ = close_Sc_wrt_T α ⟦θ ▹ σ⟧.
Proof.
  introv LC NID NICD. ind_Sub θ. crush.
  dist. rewrite IHθ. 2:eauto. 2:crush. 2:crush. remember ⟦θ ▹ σ⟧ as σ'.
  eapply subst_skvar_Sc_close_Sc_wrt_T. eauto. fsetdec+. crush.
Qed.

Lemma Sub_app_Sc_close_Sc_wrt_A : forall θ σ a,
    lc(θ)
  -> varl a ∐ dom_Sub θ
  -> varl a ∐ skvars_codom_Sub θ
  -> ⟦θ ▹ close_Sc_wrt_A σ a⟧ = close_Sc_wrt_A ⟦θ ▹ σ⟧ a.
Proof.
  introv LC NID NICD. ind_a a. crush.
  simpl+. fequals. rewrite <- IHa.
  2:clear - NID; disj_sub.
  2:clear - NICD; disj_sub.
  apply Sub_app_Sc_close_Sc_wrt_T. auto.
  in_disj.
  in_disj.
Qed.

Ltac destr' :=
  repeat match goal with
    | [ H : ex (fun x => _) |- _ ] => let x := fresh x in destruct H as [x H]
    end.

Theorem Inf_complete_open : forall e ψ__dec a__np τ__np t__np,
    ψ__dec ⊢d' e ▸ ⟨a__np⟩ τ__np ⤳ t__np
  -> forall ψ__in, ψ__in ⤳t' ψ__dec
  -> exists a__p τ__p t__p ψ__out a__alg τ__alg t__alg,
      ψ__dec ⊢d' e ▸ ⟨a__p⟩ τ__p ⤳ t__p
    /\ SubSumpTmEq ψ__dec a__p t__p τ__p a__np t__np τ__np
    /\ ψ__in ⊢ e ▸ ⟨a__alg⟩ τ__alg ⤳ t__alg ⊣ ψ__out
    /\ ψ__out ::o ⦇t__alg ▸ ⟨a__alg⟩ S__T τ__alg⦈ ⤳t' ψ__dec ::o ⦇t__p ▸ ⟨a__p⟩ S__T τ__p⦈.
Proof.
  introv DEC. forwards E: DecA_lc DEC. gen ψ__dec a__np τ__np t__np. induction E.
  all: introv DECA [θ INST]; inverts DECA.
  (** var *) - admit. (** unit *) - admit.

  (** app *)
  - rename a1 into a__np1. rename a2 into a__np2.
    rename τ1 into τ__np1. rename τ__np into τ__np2.
    rename t1 into t__np1. rename t2 into t__np2.
    (**)
    specializes IHE1. eassumption. eauto.
    destruct IHE1 as [a__p1 [τ__p [t__p1 [ψ1 [a1 [τ [t1 [DEC__p1 [EQ1 [INF1 EINST1]]]]]]]]]].
    inv_EInst'. onAllHyps move_up_types.
    (**)
    specializes IHE2. eassumption. exists. econstructor. eassumption. admit.
    destruct IHE2 as [a__p2 [τ__p1 [t__p2 [ψ2 [a2 [τ1 [t2 [DEC__p2 [EQ2 [INF2 EINST2]]]]]]]]]].
    inv_EInst'. onAllHyps move_up_types.
    (**)
    exists. splits.
    + econstructor. eassumption. eassumption.
    + admit.
    + econstructor. eassumption.

  (** abs *) - admit.


  (** let *)
  - clear E H. rename IHE into IH__e1. rename H0 into IH__e2. rename DEC1 into DEC__e1. rename DEC2 into DEC__e2.
    rename τ1 into τ__np1. rename τ__np into τ__np2. rename t1 into t__np1. rename t2 into t__np2.
    rename a1 into a__np1. rename a__np into a__np2. rename INST into INST__in. onAllHyps move_up_types.
    (** IH e1 *)
    specializes IH__e1. eassumption. exists. eassumption.
      destruct IH__e1 as [a__p1 [τ__p1 [t__p1 [ψ1 [a1 [τ1 [t1 [DEC__p1 [EQ1 [INF__e1 INST1]]]]]]]]]].
      clear INST__in. inv_TEInst. onAllHyps move_up_types. rename θ0 into θ__ψ1. rename θ3 into θ1.

    forwards: AInst_close_Sc_wrt_A' ⟦θ__ψ1 ▹ τ1⟧. eassumption. admit. admit.

    freshx L.
    (* specializes IH__e2 (ψ__dec ::x x :- (∀ a__p1 ⬪ S__T ⟦θ3 ++ θ0 ▹ τ1⟧) ::o ⦇t__Unit ▸ ⟨a__p1⟩ S__T T__Unit⦈). *)
    (* specializes IH__e2. admit. admit. *)
    (** we need these two:
      (ψ__dec ::x x :- (∀ a__p1 ⬪ S__T ⟦θ3 ++ θ0 ▹ τ1⟧) ::o ⦇t__Unit ▸ ⟨a__p1⟩ S__T T__Unit⦈)
      (ψ1   ::x x :- (∀ a1 ⬪ S__T τ1)               ::o ⦇Λ a1 ⬪ t1 ▸ ⟨[]⟩ S__T T__Unit⦈ ::o ⦇t__Unit ▸ ⟨a1⟩ S__T T__Unit⦈).
    EITHER remove lambda from alg env, or add to dec env *)

    (** removing lambda from alg env *)
    specializes IH__e2
        (ψ__dec ::x x :- (∀ a__p1 ⬪ S__T ⟦θ1 ++ θ__ψ1 ▹ τ1⟧) ::o ⦇t__Unit ▸ ⟨a__p1⟩ S__T T__Unit⦈)
        (ψ1   ::x x :- (∀ a1 ⬪ S__T τ1)               ::o ⦇t__Unit ▸ ⟨a1 ⟩ S__T T__Unit⦈).
      applys_eq DEC__e2. fequals. fequals. admit. admit. fsetdec.
      specializes IH__e2. exists. applys_eq TEInst__O. 2:applys_eq TEInst__S. 2:eassumption. 2:eassumption.
      simpl+. fequals. fequals. dist. rewrite H. rewrite Sub_app_Sc_close_Sc_wrt_A. reflexivity.
      admit. admit. admit.
      (**)
      destruct IH__e2 as [a__p2 [τ__p2 [t__p2 [ψ__out' [a2 [τ2 [t2 [DEC__p2 [EQ2 [INF__e2 INST__out]]]]]]]]]].
      assert (ADM: exists ψ__out σ__out t1' a__p1', ψ__out' = ψ__out ::x x :- σ__out ::o ⦇t1' ▸ ⟨[]⟩ S__T T__Unit⦈ ::o ⦇t__Unit ▸ ⟨a__p1'⟩ S__T T__Unit⦈).
      admit. destruct ADM as [ψ__out [σ__out [t1' [a__p1' EQ]]]]. subst.

    exists. splits.
    + econstructor. eassumption. intros y _.  simpl+. asserts_rewrite (y = x). admit.
      applys_eq DEC__p2. rewrite open_Tm_wrt_Tm_close_Tm_wrt_Tm. reflexivity.
    + admit.
    + econstructor. eassumption. intros y _. simpl+. asserts_rewrite (y = x). admit.
      eassumption.


    forwards [a__np2' [τ__np2' [t__np2' [DEC__e2' [EQ__τ' EQ1']]]]]: Inf_complete_let_rewr_e1 (∀ a__p1 ⬪ S__T ⟦θ3 ++ θ0 ▹ τ1⟧) a__p1 DEC__e2.
      admit. admit. admit.

    specializes IH__e2 (ψ__dec ::x x :- (∀ a__p1 ⬪ S__T ⟦θ3 ++ θ0 ▹ τ1⟧) ::o ⦇t__Unit ▸ ⟨a__p1⟩ S__T T__Unit⦈)
                     (ψ1   ::x x :- (∀ a1 ⬪ S__T τ1)               ::o ⦇t__Unit ▸ ⟨a1 ⟩ S__T T__Unit⦈).
    specializes IH__e2. exists. EInst_constr. 2:EInst_constr. 2:eassumption. simpl+. reflexivity.








    (** trying *)
    freshx L.
    specializes DEC__e2 x. specializes DEC__e2. fsetdec.

    forwards EINST1: EInst__O t__Unit a1 (S__T T__Unit).
      instantiate (3 := ψ1 ::x x :- (∀ a1 ⬪ S__T τ1) ::o ⦇Λ a1 ⬪ t1 ▸ ⟨[]⟩ S__T T__Unit⦈).
      eapply EInst__O. eapply EInst__S. eassumption. admit. auto.
      applys FrA_L_sub FR. admit. simpl+. applys AInst_E_sk_sub AINST. reldec.
      simpl+ in EINST1.

    forwards [a__np2' [τ__np2' [t__np2' [DEC__e2' [EQ__τ' EQ1']]]]]: Inf_complete_let_rewr_e1 (∀ a__p1 ⬪ S__T ⟦θ3 ++ θ0 ▹ τ1⟧) a__p1 DEC__e2.
      admit. admit.

    forwards [a__np2'' [τ__np2'' [t__np2'' [DEC__e2'' [EQ__τ'' EQ1'']]]]]: Inf_complete_let_rewr_e1 (⟦θ0 ▹ ∀ a1 ⬪ S__T τ1⟧) a__p1 DEC__e2.
      admit. admit.


    specializes IH__e2. 2:exists; eapply EINST1. applys_eq DEC__e2'. admit.
      destruct IH__e2 as [a__p2 [τ__p2 [t__p2 [ψ__out' [a2 [τ2 [t2 [DEC__p2 [EQ2 [INF__e2 INST__out]]]]]]]]]].
      assert (ADM: exists ψ__out σ__out t1' a__p1', ψ__out' = ψ__out ::x x :- σ__out ::o ⦇t1' ▸ ⟨[]⟩ S__T T__Unit⦈ ::o ⦇t__Unit ▸ ⟨a__p1'⟩ S__T T__Unit⦈).
      admit. destruct ADM as [ψ__out [σ__out [t1' [a__p1' EQ]]]]. subst.
      inv_TEInst. onAllHyps move_up_types.

    exists. splits.
    + econstructor. eassumption. introy.
    + admit.
    + econstructor. eassumption. intros.

    (* (** IH e2 *) *)
    (* freshx L. specializes DEC__e2 x. specializes DEC__e2. fsetdec. *)


    (* assert ((∅) ⊢e' ψ1 ::x x :- (∀ a1 ⬪ S__T τ1) ::o ⦇Λ a1 ⬪ t1 ▸ ⟨[]⟩ S__T T__Unit⦈ ::o ⦇t__Unit ▸ ⟨a__np1⟩ S__T T__Unit⦈ ⤳ *)
    (*           ((ψ__dec ::x x :- ⟦θ0 ▹ ∀ a1 ⬪ S__T τ1⟧) ::o ⦇⟦θ0 ▹ Λ a1 ⬪ t1⟧ ▸ ⟨[]⟩ S__T T__Unit⦈) ::o ⦇t__Unit ▸ ⟨[]⟩ S__T T__Unit⦈). *)
    (* { forwards [?θ ?AINST]: AInst_trivial. *)
    (*   exists. applys_eq EInst__O. fequals. simpl+. reflexivity. simpl+. reflexivity. 2:auto. 2:eassumption. *)
    (*   applys_eq EInst__O. fequals. 3:applys_eq EInst__S. 4:eassumption. 5:auto. *)
    (*   all:simpl+; fequals. auto. *)
    (* } *)


    specializes IH__e2 (((ψ__dec ::x x :- ⟦θ0 ▹ ∀ a1 ⬪ S__T τ1⟧) ::o ⦇⟦θ0 ▹ Λ a1 ⬪ t1⟧ ▸ ⟨[]⟩ S__T T__Unit⦈) ::o ⦇t__Unit ▸ ⟨a__p1⟩ S__T T__Unit⦈)
                     (ψ1 ::x x :- (∀ a1 ⬪ S__T τ1) ::o ⦇Λ a1 ⬪ t1 ▸ ⟨[]⟩ S__T T__Unit⦈ ::o ⦇t__Unit ▸ ⟨a1⟩ S__T T__Unit⦈).
      applys_eq DEC__e2. admit. specializes IH__e2.
      forwards [?θ ?AINST]: AInst_trivial.
      exists. applys_eq EInst__O. fequals. 1,2:simpl+; reflexivity. 2:admit. 2:eassumption.
      applys_eq EInst__O. 2:applys_eq EInst__S. 2:eassumption. 3:auto. simpl+. fequals. auto.
      destruct IH__e2 as [a__p2 [τ__p2 [t__p2 [ψ__out' [a2 [τ2 [t2 [DEC__p2 [EQ2 [INF__e2 INST__out]]]]]]]]]].
      assert (ADM: exists ψ__out σ__out t1' a__p1', ψ__out' = ψ__out ::x x :- σ__out ::o ⦇t1' ▸ ⟨[]⟩ S__T T__Unit⦈ ::o ⦇t__Unit ▸ ⟨a__p1'⟩ S__T T__Unit⦈).
      admit. destruct ADM as [ψ__out [σ__out [t1' [a__p1' EQ]]]]. subst.
      clear EINST AINST. inv_TEInst. onAllHyps move_up_types.

    exists a__p2. exists. splits. econstructor. applys DEC__p1. introy. applys_eq DEC__p2. admit. admit. admit. admit.
    econstructor. eassumption. introy. applys_eq INF__e2. admit. admit. admit. admit.


    assert (TYP__e2: Typable (ψ__dec ::x x :- (∀ a__p1 ⬪ S__T τ__x) ::o ⦇Λ a__p1 ⬪ t__p1 ▸ ⟨[]⟩ S__T T__Unit⦈) (open_Ex_wrt_Ex e2 (e__Var_f x))).
      forwards [a' [τ' [t' DEC__e2']]]: DecA_generalize_binding (∀ a__p1 ⬪ S__T τ__x) DEC__e2.
      destruct PRIN1 as [_ H]. specializes H DEC__e1. destruct H as [t' [SST _]].
      eapply SubSumpTm'_SubSump. eassumption.
      forwards [a'' [τ'' [t'' DEC__e2'']]]: DecA_weaken_app  (<⦇Λ a__p1 ⬪ t__p1 ▸ ⟨[]⟩ S__T T__Unit⦈>o). eassumption.
      unfolds. exists. applys_eq DEC__e2''.
    assert (INST1': (∅) ⊢e' ψ1 ::x x :- (∀ a1 ⬪ S__T τ1) ::o ⦇Λ a1 ⬪ t1 ▸ ⟨[]⟩ S__T T__Unit⦈
                      ⤳ ψ__dec ::x x :- (∀ a__p1 ⬪ S__T τ__x) ::o ⦇Λ a__p1 ⬪ t__p1 ▸ ⟨[]⟩ S__T T__Unit⦈). admit.
    (**)
    specializes IH__e2 TYP__e2 INST1'.
      destruct IH__e2 as [a__p2 [τ__p2 [t__p2 [ψ__out' [a2 [τ2 [t2 [PRIN2 [INF__e2 INST__out]]]]]]]]].
      assert (ADM: exists ψ__out σ__out t1', ψ__out' = ψ__out ::x x :- σ__out ::o ⦇t1' ▸ ⟨[]⟩ S__T T__Unit⦈).
      admit. destruct ADM as [ψ__out [σ__out [t1' EQ]]]. subst.
      clear INST1 INST1' DEC__e1 DEC__e2. onAllHyps move_up_types.
    (**)
    exists a__p2 τ__p2 ({(Λ a__p1 ⬪ t__p1) ≔__x x} t__p2). exists ψ__out a2 τ2 ({t1' ≔__x x} t2). splits.
    + admit.
    + applys_eq Inf__Let. rewrite subst_tvar_Tm_spec. reflexivity. eassumption.
      intros y NIL__y. asserts_rewrite (y = x). admit. applys_eq INF__e2. apply open_Tm_wrt_Tm_close_Tm_wrt_Tm.
    + clear PRIN1 PRIN2 INF__e1 INF__e2 TYP__e2.
      inv_TEInst. simpl+ in *. onAllHyps move_up_types.
      exists. applys_eq EInst__O. 2:eassumption. 2:instantiate (1 := a__p2); admit. 2:applys_eq AINST; admit.
      simpl+. fequals.
      rewrite <- Sub_app_Tm_subst_tvar_Tm'. fequals. admit.
Admitted.
