Set Warnings "-notation-overridden".

Require Import Preamble.
Require Import Defs.HdmLems.


(* Require Import Defs.Dec. *)
Notation  "ψ ⊢d e ▸ τ ⤳ t" := (Dec ψ e τ t) (at level 70, format "ψ  ⊢d  e  ▸  τ  ⤳  t" ) : type_scope.
(* Require Import Defs.E. *)
(* Require Import Defs.EInst. *)
(* Require Import Defs.ERels. *)
(* Require Import Defs.FrA. *)
(* Require Import Defs.Freevars. *)
(* Require Import Defs.Foralls. *)
(* Require Import Defs.Inf. *)
(* Require Import Defs.Inst. *)
(* Require Import Defs.Lc. *)
(* Require Import Defs.List. *)
(* Require Import Defs.NoDup. *)
(* Require Import Defs.Subst. *)
(* Require Import Defs.Sub. *)
(* Require Import Defs.Subx. *)
Require Import Defs.SubSump.
Require Import Defs.TmTy.

(* Require Import Defs.WfE. *)
Require Import Defs.WfSTt.

Require Import LibHyps.LibHyps.


Require Import Semantics.LogRel.
Require Import Semantics.EquivRel.
(* Require Import Semantics.FundProp. *)
Require Import Semantics.FundProp.CompatUnitTrueFalse.
Require Import Semantics.FundProp.CompatApp.
Require Import Semantics.FundProp.CompatLam.




Corollary Dec_subst_name_open : forall x__out ψ e τ t σ,
    (ψ ::x x__out :- σ) ⊢d open_Ex_wrt_Ex e (e__Var_f x__out) ▸ τ ⤳ open_Tm_wrt_Tm t (t__Var_f x__out)
  -> x__out ∉ E_names ψ ∪ E_t_names ψ ∪ fv__x(e) ∪ fv__x(t)
  -> forall x__in, x__in ∉ (E_names (ψ ::x x__out :- σ))
  -> (ψ ::x x__in :- σ) ⊢d open_Ex_wrt_Ex e (e__Var_f x__in) ▸ τ ⤳ open_Tm_wrt_Tm t (t__Var_f x__in).
(** In Dec.v*)
Admitted.

Fact Dec_wft : forall ψ e τ t,
    ψ ⊢d e ▸ τ ⤳ t
(** MIGHT NEED WF(ψ)!!!*)
  -> ψ ⊢wft t.
Admitted.

Fact Dec_lce : forall ψ e τ t,
    ψ ⊢d e ▸ τ ⤳ t
(** MIGHT NEED WF(ψ)!!!*)
  -> lc(e).
Admitted.


Module Type DecESSArgs.
  Parameter Rel_E : E -> E -> Prop.
  (* Parameter Rel_T : T -> T -> Prop. *)
  Parameter Rel_t : E -> Sc -> Tm -> Tm -> Prop.

  Parameter ESS_consx : forall ψ1 ψ2 x σ,
      Rel_E ψ1 ψ2
    -> Rel_E (ψ1 ::x x :- σ) (ψ2 ::x x :- σ).
  #[export] Hint Resolve ESS_consx : core.

  Parameter ESS_consa : forall ψ1 ψ2 a,
      Rel_E ψ1 ψ2
    -> Rel_E (ψ1 ::a a) (ψ2 ::a a).
  #[export] Hint Resolve ESS_consa : core.

  Parameter ESS_LU : forall ψ1 ψ2 x σ1 τ t1,
      E_lookup ψ1 x = Some σ1
    -> SubSump ψ1 (t__Var_f x) σ1 t1 τ
    -> Rel_E ψ1 ψ2
    -> exists σ2 t2,
      E_lookup ψ2 x = Some σ2
    /\ SubSump ψ2 (t__Var_f x) σ2 t2 τ
    /\ Rel_t ψ2 (S__T τ) t1 t2.

  Parameter Rel_E_WfT : forall ψ1 ψ2 τ,
      Rel_E ψ1 ψ2
    -> ψ1 ⊢wfτ τ
    -> ψ2 ⊢wfτ τ.
  #[export] Hint Resolve Rel_E_WfT : core.

  Parameter Rel_t_Unit : forall ψ,
      Rel_t ψ (S__T T__Unit) t__Unit t__Unit.
  #[export] Hint Resolve Rel_t_Unit : core.

  Parameter Rel_t_App : forall ψ t1 t1' t2 t2' τ' τ,
      Rel_t ψ (S__T (T__Fun τ' τ)) t1 t2
    -> Rel_t ψ (S__T τ') t1' t2'
    -> Rel_t ψ (S__T τ) (t__App t1 t1') (t__App t2 t2').
  #[export] Hint Resolve Rel_t_App : core.

  Parameter Rel_t_Lam : forall ψ t t' τ τ' x,
      Rel_t (ψ ::x x :- S__T τ) (S__T τ') (open_Tm_wrt_Tm t (t__Var_f x)) (open_Tm_wrt_Tm t' (t__Var_f x))
    -> x ∉ E_names ψ ∪ fv__x(t) ∪ fv__x(t')
    -> ψ ⊢wfτ τ
    -> Rel_t ψ (S__T (T__Fun τ τ')) (t__Lam τ t) (t__Lam τ t').
  #[export] Hint Resolve Rel_t_Lam : core.
End DecESSArgs.

Module DecESS (Import Args : DecESSArgs).
  Lemma Dec_ESS_weaken : forall e ψ1 ψ2 τ t1,
      ψ1 ⊢d e ▸ τ ⤳ t1
    -> Rel_E ψ1 ψ2
    -> exists t2,
      ψ2 ⊢d e ▸ τ ⤳ t2
    /\ Rel_t ψ2 (S__T τ) t1 t2.
  Proof.
    intro e'. introv DEC. forwards e: Dec_lce. eassumption. gen ψ1 ψ2 τ t1.
    induction e; introv DEC RE; inverts DEC.
    - forwards [σ2 [t2 [IN' [SS' Rt]]]]: ESS_LU. eassumption. eassumption. eassumption.
      exists. eauto.
    - exists. eauto.
    - specializes IHe1. eassumption. eassumption. destruct IHe1 as [t1' [DEC1' Rt1]].
      specializes IHe2. eassumption. eassumption. destruct IHe2 as [t2' [DEC2' Rt2]].
      exists. splits; eauto.
    - rename H0 into IH.
      forwards [x NIL__x]: atom_fresh (L ∪ E_names ψ1 ∪ E_names ψ2 ∪ E_t_names ψ2 ∪ fv__x(e)).
      forwards IH': IH x. eauto. eauto. destruct IH' as [t2 [DEC Rt]].
      assert (NIT__x: x ∉ fv__x(close_Tm_wrt_Tm x t2)).
      rewrite ftv_Tm_close_Tm_wrt_Tm. forwards: Wft_names. eapply Dec_wft. eapply DEC. simpl+ in H0. rewrite H0. clear - NIL__x. fsetdec.
      exists. splits. applys Dec__Abs (L ∪ E_names ψ2 ∪ {{x}}). eauto. intros y NIL__y.
      eapply Dec_subst_name_open.
      erewrite <- (open_Tm_wrt_Tm_close_Tm_wrt_Tm t2) in DEC. eassumption. clear - NIL__x NIT__x. fsetdec. simpl+. fsetdec.
      eapply Rel_t_Lam. rewrite open_Tm_wrt_Tm_close_Tm_wrt_Tm. eassumption. 2:eauto.
      forwards FR0: Wft_names. eapply Dec_wft. eapply Dec__Abs. eassumption. eassumption. simpl+ in FR0. rewrite FR0.
      fsetdec.
    - rename IHe into IH__e1. rename H0 into IH__e2.
      specializes IH__e1; eauto. destruct IH__e1 as [t1' [DEC1' RT1]].
      forwards [x NIL__x]: atom_fresh (L).
      specializes IH__e2. applys DEC2 x. fsetdec. eauto. destruct IH__e2 as [t2'' [DEC2' RT2]].
      erewrite <- (open_Tm_wrt_Tm_close_Tm_wrt_Tm t2'' x) in DEC2'. erewrite <- (open_Tm_wrt_Tm_close_Tm_wrt_Tm t2'' x) in RT2.
      remember (close_Tm_wrt_Tm x t2'') as t2'. clears t2''.
      (**)
      exists. splits. applys Dec__Let. eassumption. intros y NIL__y. asserts_rewrite (y = x) in *. admit.
      eassumption. admit.

      forwards: Rel_t_Lam.


      admit.
  Admitted.
End DecESS.


Definition E_filter_A : E -> E :=
    E_fold
      E__Nil
      E__A
      (const ∘ const)
      (const ∘ const ∘ const).

Definition E_filter_X : E -> E :=
    E_fold
      E__Nil
      const
      E__Var
      (const ∘ const ∘ const).

#[derive(equations=no)] Equations ESS_SubSump'' (ψ1 ψ2:E) : Prop :=
  ESS_SubSump'' •               •               := True;
  ESS_SubSump'' (ψ1 ::x x :- σ1) (ψ2 ::x y :- σ2) := SubSump'' ψ2 σ1 σ2 /\ ESS_SubSump'' ψ1 ψ2;
  ESS_SubSump'' _               _               := False.

Definition ESS (ψ1 ψ2:E) := E_filter_A ψ1 = E_filter_A ψ2 /\ ESS_SubSump'' (E_filter_X ψ1) (E_filter_X ψ2).
Notation "A ≦ B" := (ESS A B) (at level 75, format "A  ≦  B").

Fact ESS_proj1 : forall ψ1 ψ2, ψ1 ≦ ψ2 -> E_filter_A ψ1 = E_filter_A ψ2. crush. Qed.
Fact ESS_proj2 : forall ψ1 ψ2, ψ1 ≦ ψ2 -> ESS_SubSump'' (E_filter_X ψ1) (E_filter_X ψ2). crush. Qed.
#[export] Hint Resolve ESS_proj1 ESS_proj2 : core.

Axiom SubSump''_refl : forall ψ σ,
    SubSump'' ψ σ σ.
#[export] Hint Resolve SubSump''_refl : core.

Lemma ESS_consx : forall ψ1 ψ2 x σ,
    ψ1 ≦ ψ2
  -> ψ1 ::x x :- σ ≦ ψ2 ::x x :- σ.
Proof. intros. split; simpl+; crush. Qed.

Lemma ESS_consa : forall ψ1 ψ2 a,
    ψ1 ≦ ψ2
  -> ψ1 ::a a ≦ ψ2 ::a a.
Proof. intros. split; simpl+; crush. fequals; auto. Qed.

Require Import Defs.ERels.
Require Import Defs.SubSump_logrel.

Lemma ESS_LU : forall ψ1 ψ2 x σ1,
    E_lookup ψ1 x = Some σ1
  -> ψ1 ≦ ψ2
  -> exists σ2,
      E_lookup ψ2 x = Some σ2
    /\ SubSump'' ψ2 σ2 σ1.
Admitted.

Lemma ESS_var : forall ψ1 ψ2 x σ1 τ t1,
    E_lookup ψ1 x = Some σ1
  -> SubSump ψ1 (t__Var_f x) σ1 t1 τ
  -> ψ1 ≦ ψ2
  -> exists σ2 t2,
    E_lookup ψ2 x = Some σ2
  /\ SubSump ψ2 (t__Var_f x) σ2 t2 τ
  /\ ψ2 ⊢t≈ t1 ≈ t2 ▸ S__T τ.
Proof.
  introv LU SS SUB.
  eapply ESS_LU in LU. 2:eassumption. destruct LU as [σ2 [LU SS']].
  forwards SS__T: SubSump''_trans. apply SS'. eapply SubSump_SubSump''. applys_eq SS. admit.
  forwards [t2 SS'']: SubSump''_SubSump (t__Var_f x). apply SS__T.
  exists σ2 t2. splits. assumption. assumption.


Lemma E_filter_A_empty_E_sk_sub : forall ψ,
    E_filter_A ψ = •
  -> E_A_skvars ψ ≡ ∅.
Proof. induction ψ; introv H; simpl+ in *; try inverts H; crush. Qed.

Lemma ESS_E_sk_sub : forall ψ1 ψ2,
    E_filter_A ψ1 = E_filter_A ψ2
  -> ψ1 ⊆ψα ψ2.
Proof.
  intro ψ1. induction ψ1. crush.
  - intro ψ2. induction ψ2; introv EQ; simpl+ in EQ; inverts EQ; unfolds; simpl+; crush.
  - intros. unfolds. simpl+ in *. apply IHψ1. assumption.
  - intros. unfolds. simpl+ in *. apply IHψ1. assumption.
Qed.
#[export] Hint Resolve ESS_E_sk_sub : core.

Lemma Rel_E_WfT : forall ψ1 ψ2 τ,
    ψ1 ≦ ψ2
  -> ψ1 ⊢wfτ τ
  -> ψ2 ⊢wfτ τ.
Proof. intros. eauto using WfT_E_A_sk_sub. Qed.

Module ESS_Logrel_Args <: DecESSArgs.
  Definition Rel_E := ESS.

  Definition ESS_consx := ESS_consx.
  Definition ESS_consa := ESS_consa.

  Definition ESS_LU := ESS_LU.
  Definition Rel_E_WfT := Rel_E_WfT.

  Definition Rel_t := EquivRel.

  Definition Rel_t_Unit := CompatUnit.
  Definition Rel_t_App := CompatApp.
  Definition Rel_t_Lam := CompatLam'.
End ESS_Logrel_Args.

Module ESS_Logrel := DecESS ESS_Logrel_Args.

Lemma Dec_ESS_Logrel_weaken : forall ψ1 ψ2 e τ t,
    ψ1 ⊢d e ▸ τ ⤳ t
  -> ψ1 ≦ ψ2
  -> exists t',
    ψ2 ⊢d e ▸ τ ⤳ t'
  /\ ψ2 ⊢t≈ t ≈ t' ▸ (S__T τ).
Proof. intros. applys_eq ESS_Logrel.Dec_ESS_weaken; eassumption. Qed.


Axiom ESS_conso : forall ψ1 ψ2 t1 t2 a1 a2 σ1 σ2,
    ψ1 ≦ ψ2
  <-> ψ1 ::o ⦇t1 ▸ ⟨a1⟩ σ1⦈ ≦ ψ2 ::o ⦇t2 ▸ ⟨a2⟩ σ2⦈.

Axiom ESS_consa : forall ψ1 ψ2 a1 a2,
    ψ1 ≦ ψ2
  <-> ψ1 ::a a1 ≦ ψ2 ::a a2.

Axiom ESS_consx : forall ψ1 ψ2 σ1 σ2 x,
    ψ1 ≦ ψ2
  /\ SubSump' ψ2 (t__Var_f x) σ1 (t__Var_f x) σ2
  <-> ψ1 ::x x :- σ1 ≦ ψ2 ::x x :- σ2.

#[local] Instance ESS_trans : Transitive ESS. Admitted.


Theorem Dec_weaken_ESS : forall ψ1 ψ2 e τ t,
    ψ1 ⊢d e ▸ τ ⤳ t
  -> ψ2 ≦ ψ1
  -> ψ2 ⊢d e ▸ τ ⤳ t.
Admitted.
