embed {{ coq
Require Import TLC.LibTactics.
Require Import Coq.micromega.Lia.
Require Export Metalib.LibLNgen.
Require Import Coq.Program.Equality.
Require Import Metalib.MetatheoryAtom.
Require Import Cpdtlib.CpdtTactics.

Require Import Defs.HdmRewrites.

From Coq Require Import Init.Logic.

#[export] Hint Constructors Compare : core.
Set Warnings "-notation-overridden".

Open Scope program_scope.
}}

indexvar index, in, out ::= {{ coq nat }}
         
metavar termvar, x, y ::= {{ com term variable }}
                          {{ coq-equality apply eq_dec. }} 
                          {{ lex alphanum }}
                          {{ tex \mathit{[[termvar]]} }}
                          {{ coq atom }}
                          {{ coq-equality apply eq_dec. }}
  
metavar   dskvar
        , dskA {{ tex \text{a} }}
        , dskB {{ tex \text{b} }}
        ::= {{ com skollem variable }}
            {{ coq-equality apply eq_dec. }} 
            {{ coq-equality }}
            {{ lex alphanum}}
            {{ coq atom }}
            {{ coq-equality apply eq_dec. }}

grammar
  e :: 'e_' ::= {{ com Terms }} {{ coq-equality }}
    | x                    ::   :: Var                     {{ com Term variable }}
    | unit                 ::   :: Unit                    {{ com Term unit }}
    | e1 e2                ::   :: App                     {{ com Application }}
    | \ x . e              ::   :: Lam (+ bind x in e +)   {{ com Abstraction }}
    | let x = e1 inlet e2  ::   :: Let (+ bind x in e2 +)  {{ com Let binding }}
    | ( e )                :: S :: Paren                   {{ com Parenthesis }} {{ icho [[e]] }}

  DTy {{ tex \tau }} :: 'DT_' ::= {{ com Dec Types }} {{ coq-equality }}
    | dskA         ::   :: SkVar                 {{ com Skolem variable }} 
    | Unit         ::   :: Unit                  {{ com Unit type }}
    | DTy1 -> DTy2 ::   :: Fun                   {{ com Function type }}
    | ( DTy )      :: S :: Paren                 {{ com Parehtiesis }} {{ icho [[DTy]]  }} 

  DSch {{ tex \sigma }} :: 'DS_' ::= {{ com Dec Type schemes }} {{ coq-equality }}
    | DTy                 ::   :: Mono                            {{ com Monotype }}
    | forall dskA . DSch  ::   :: Forall  (+ bind dskA in DSch +) {{ com Forall }}
    | [ DTy / dskA ] DSch :: M :: SubstSk                         {{ com Skolemm substitution }}
                                                                  {{ coq ( subst_dskvar_DSch [[DTy]] [[dskA]] [[DSch]] ) }}

  DEnv {{ tex \Psi }} :: 'DEnv_' ::= {{ com Dec Environment }}
    | bullet            ::   :: Empty        {{ com Empty environment }}
    | DEnv ; dskA       ::   :: DSkol        {{ com Cons Sk }}
    | DEnv ; x : DSch   ::   :: DVar         {{ com Cons Variable }}

terminals :: 'terminals_' ::=
  | \            ::  :: lambda             {{ tex \lambda }}
  | \\           ::  :: Lambda             {{ tex \Lambda }}
  | -->          ::  :: red                {{ tex \longrightarrow }}
  | ->           ::  :: funarr             {{ tex \to }}
  | ~>           ::  :: instarr            {{ tex \leadsto }}
  | bullet       ::  :: bullet             {{ tex \bullet }}
  | let          ::  :: let                {{ tex \textbf{let} }}
  | inlet        ::  :: in                 {{ tex \textbf{in} }}
  | unit         ::  :: teUnit             {{ tex \texttt{unit} }}
  | Unit         ::  :: tyUnit             {{ tex \texttt{Unit} }}
  | forall       ::  :: forall             {{ tex \forall }}
  | Forall       ::  :: Forall             {{ tex \forall }}
  | .            ::  :: point
  | |-           ::  :: turnstyle          {{ tex \vdash }}
  | |=           ::  :: turnstyle_doub     {{ tex \models }}
  | |-ty         ::  :: turnstyle_ty       {{ tex \vdash_{\widehat{\texttt{ty} } } }}
  | |-dty        ::  :: turnstyle_dty      {{ tex \vdash_\texttt{ty} }}
  | |-           ::  :: vdash              {{ tex \vdash }}
  | ||-          ::  :: Vdash              {{ tex \Vdash }}
  | ||-mono      ::  :: Vdash_mono         {{ tex \Vdash_\texttt{mono} }}
  | ||-poly      ::  :: Vdash_poly         {{ tex \Vdash_\texttt{poly} }}
  | -|           ::  :: rev_turnstyle      {{ tex \dashv }}
  | -||          ::  :: rev_turnstyle_doub {{ tex \VdashR }}
  | sim          ::  :: sim                {{ tex \sim }}
  | <=           ::  :: leq                {{ tex \leq }}
  | <            ::  :: langle             {{ tex \langle }}
  | >            ::  :: rangle             {{ tex \rangle }}
  | embedin      ::  :: embedin            {{ tex \hookrightarrow }}
  | dot          ::  :: composition        {{ tex \circ }}
  | ++           ::  :: listappend         {{ tex \doubleplus  }}

substitutions
  single e   x    :: subst_tm

  single DTy  dskA :: subst_dskvar

freevars
  e    x    :: free_xs
  DTy  dskA :: free_dskvars



% formula :: formula_ ::=
%   | judgement :: :: judgement

% % generalisation
%   | genDSch DSch2 DA = DSch1 :: :: genDSch
%     {{ tex \mathsf{gen([[DSch2]], [[DA]]) } = [[DSch1]] }}
%     {{ coq (generalize_DSch [[DSch2]] [[DA]] = [[DSch1]]) }}
%   | genSch Sch2 A = Sch1 :: :: genSch
%     {{ tex \mathsf{gen([[Sch2]], [[A]]) } = [[Sch1]] }}
%     {{ coq (generalize_Sch [[Sch2]] [[A]] AtomSetImpl.empty = [[Sch1]]) }}

% % equality
%   | Sch1 = Sch2 :: :: Sch_equality
%     {{ tex [[Sch1]] = [[Sch2]] }}
%     {{ coq ([[Sch1]] = [[Sch2]]) }}
%   | Env1 = Env2 :: :: Env_equality
%     {{ tex [[Env1]] = [[Env2]] }}
%     {{ coq ([[Env1]] = [[Env2]]) }}

% % declarative membership
%   | dskA elem DEnv :: :: dskvar_elem_DEnv
%     {{ tex [[dskA]] \in [[DEnv]] }}
%     {{ coq ([[dskA]] `in` (DEnv_dskvars [[DEnv]]) ) }}
%   | dskA notelem DEnv :: :: dskvar_notelem_DEnv
%     {{ tex [[dskA]] \not\in [[DEnv]] }}
%     {{ coq ([[dskA]] `notin` (DEnv_dskvars [[DEnv]]) ) }}
% %
%   | x : DSch elem DEnv :: :: termvar_elem_DEnv
%     {{ tex [[x]] : [[DSch]] \not\in [[DEnv]] }}
%     {{ coq (DSchPSI.In ([[x]],[[DSch]]) (DEnv_bindings [[DEnv]]) ) }}

% % algorithmic membership
%   | skA elem Env :: :: skvar_elem_Env
%     {{ tex [[skA]] \in [[Env]] }}
%     {{ coq ([[skA]] `in` (Env_skvars [[Env]]) ) }}
% %
%   | exA elem Env :: :: exvar_elem_Env
%     {{ tex [[exA]] \in [[Env]] }}
%     {{ coq ([[exA]] `in` (Env_exvars [[Env]]) ) }}
%   | exA fresh Env :: :: exvar_fresh_Env
%     {{ tex [[exA]] \# [[Env]] }}
%     {{ coq ([[exA]] `in` (Env_Obj_exvars [[Env]]) -> False ) }}
% %
%   | x : Sch elem Env :: :: termvar_elem_Env
%     {{ tex [[x]] : [[Sch]] \in [[Env]] }}
%     {{ coq (In ([[x]],[[Sch]]) (Env_bindings [[Env]]) ) }}

% % embed
%   | DSch embedin Sch         ::   :: Embed
%     {{ coq ( [[Sch]] = emb_Sch [[DSch]] ) }}

% % nolc
%   | nolc DSch                 ::   :: nolcDSch
%     {{ coq True }} {{ tex \vspace{-1em} }}
%   | nolc Sch                  ::   :: nolcSch
%     {{ coq True }} {{ tex \vspace{-1em} }}
%   | nolc DObj                 ::   :: nolcDObj
%     {{ coq True }} {{ tex \vspace{-1em} }}
%   | nolc Obj                  ::   :: nolcObj
%     {{ coq True }} {{ tex \vspace{-1em} }}
%   | nolc DEnv                 ::   :: nolcDEnv
%     {{ coq True }} {{ tex \vspace{-1em} }}
%   | nolc Env                  ::   :: nolcEnv
%     {{ coq True }} {{ tex \vspace{-1em} }}


defns DecHelpers :: '' ::=

%   defn DA # DEnv
%     :: :: DFrA :: 'DFrA'
%     {{ com DA freshness }}
%     by

%       nolc DEnv
%       ------------  :: Nil
%       bullet # DEnv


%       DA # DEnv [[:DFRA]]
%       dskA notelem DEnv; DA [[:DFR]]
%       ----------------  :: Cons
%       DA; dskA # DEnv

% defns DecTyping :: '' ::=

%   defn DEnv ||-mono e : DTy
%     :: :: Mon :: 'Mon'
%     {{ com Mono Term Typing }}
%     by

%       x : DSch elem DEnv [[:IN]]
%       DEnv ||- DSch <= DTy [[:SS]]
%       --------------------  :: Var
%       DEnv ||-mono x : DTy


%       nolc DEnv
%       ------------------------  :: Unit
%       DEnv ||-mono unit : Unit


%       DEnv |-dty DTy1 [[:WFDTY]]
%       DEnv; x : DTy1 ||-mono e : DTy2 [[:MON]]
%       -----------------------------------  :: Abs
%       DEnv ||-mono \ x . e : DTy1 -> DTy2


%       DEnv ||-mono e1 : DTy1 -> DTy2 [[:MONe1]]
%       DEnv ||-mono e2 : DTy1 [[:MONe2]]
%       ------------------------------  :: App
%       DEnv ||-mono e1 e2 : DTy2


%       DEnv ||-poly e1 : DSch [[:POL]]
%       DEnv; x : DSch ||-mono e2 : DTy [[:MON]]
%       ------------------------------------------  :: Let
%       DEnv ||-mono ( let x = e1 inlet e2 ) : DTy

%   defn DEnv ||-poly e : DSch
%     :: :: DGen :: 'DGen'
%     {{ com Poly Term Typing }}
%     by

%       DEnv; DA ||-mono e : DTy [[:MON]]
%       genDSch DTy DA = DSch
%       ---------------------  :: Gen
%       DEnv ||-poly e : DSch

%       % DEnv; dskA ||-poly e : DSch [[:POL]]
%       % ---------------------  :: Poly
%       % DEnv ||-poly e : forall dskA. DSch


  defn DEnv |-dty DSch
    :: :: WfDTy :: 'WfDTy'
    {{ com Dec Type Well-formedness }}
    by

%       dskA elem DEnv [[:IN]]
%       ---------------  :: Sk
%       DEnv |-dty dskA


%       nolc DEnv
%       -------------  :: Unit
%       DEnv |-dty Unit


%       DEnv |-dty DTy1 [[:WFDTY1]]
%       DEnv |-dty DTy2 [[:WFDTY2]]
%       -------------------  :: Arr
%       DEnv |-dty DTy1 -> DTy2


      DEnv; dskA |-dty DSch [[:WFDTY]]
      -----------------------  :: Abs
      DEnv |-dty forall dskA . DSch

%   defn wf ( DEnv )
%     :: :: WfDEnv :: 'WfDEnv'
%     {{ com Scoping/Typing Environment Well-formedness }}
%     {{ tex \texttt{wf}~([[DEnv]]) }}
%     by

%       ------------  :: Nil
%       wf( bullet )


%       DA # DEnv [[:NIN]]
%       wf( DEnv ) [[:WFDTY]]
%       ---------------  :: DA
%       wf( DEnv; DA )

%       wf( DEnv ) [[:WFD]]
%       dskA notelem DEnv [[:FR]]
%       ----------------  :: Sk
%       wf( DEnv; dskA )


%       wf( DEnv ) [[:WFD]]
%       DEnv |-dty DSch [[:WFDTY]]
%       --------------------  :: Sch
%       wf( DEnv; x : DSch )


  defn DEnv ||- DSch1 <= DSch2
    :: :: SubSump :: SubSump
    {{ com Type subsumption }}
    by

      % nolc DEnv
      % nolc DTy
      % ------------------  :: Mono
      % DEnv ||- DTy <= DTy


      DEnv; dskA ||- DSch1 <= DSch2 [[:SS]]
      ------------------------------------  :: Skol
      DEnv ||- DSch1 <= forall dskA . DSch2


      % DEnv |-dty DTy1 [[:WFDTY]]
      % DEnv ||- [DTy1 / dskA] DSch <= DTy2 [[:SS]]
      % -----------------------------------  :: Inst
      % DEnv ||- forall dskA . DSch <= DTy2

% defns
% AFreshNess :: '' ::=
%     defn A # Env
%       :: :: FrA :: 'FrA'
%       {{ com A freshness }}
%       by

%       nolc Env
%       ------------  :: Nil
%       bullet # Env


%       A # Env [[:FRA]]
%       exA fresh Env; A [[:FR]]
%       ----------------  :: Cons
%       A; exA # Env

% defns
% AlgorithmicSystem :: '' ::=

%   defn Envin |- e : [ A ] Ty -| Envout
%     :: :: Inf :: 'Inf'
%     {{ com Type Inference }}
%     by

%       x : Sch elem Env [[:IN]]
%       Env |- Sch <= [A] Ty [[:INST]]
%       ------------------------  :: Ex
%       Env |- x : [A] Ty -| Env


%       nolc Env
%       ----------------------------------  :: Unit
%       Env |- unit : [bullet] Unit -| Env


%       exA fresh Envin [[:FR]]
%       Envin; <exA>; x : exA |- e : [A2]Ty2 -| Envout; A1; x : Ty1 [[:INF]]
%       -----------------------------------------------------------  :: Abs
%       Envin |- \x.e : [A1 ++ A2] Ty1 -> Ty2 -| Envout


%       exB fresh Env2; (A1' ++ A2) [[:FR]]
%       Envin |- e1 : [A1] Ty -| Env1 [[:INFe1]]
%       Env1; {[A1] Ty} |- e2 : [A2] Ty1 -| Env2; {[A1'] Ty'} [[:INFe2]]
%       Env2; A1' ++ (A2; exB); {exB} |- <Ty' sim Ty1 -> exB> -| Envout; Aout; {Ty2} [[:UNI]]
%       -----------------------------------------------------------------------------------------------  :: App
%       Envin |- e1 e2 : [Aout] Ty2 -| Envout


%       Envin |- e1 : Sch -| Env [[:POL]]
%       Env ; x : Sch |- e2 : [A2]Ty2 -| Envout; x : Sch' [[:INF]]
%       --------------------------------------------------------------  :: LetGen
%       Envin |- let x = e1 inlet e2 : [A2] Ty2 -| Envout

%   defn Env1 |- e : Sch -| Env2
%     :: :: Gen :: 'Gen'
%     {{ com Generalization }}
%     by

%       Envin |- e : [A] Ty -| Envout [[:MON]]
%       genSch Ty A = Sch
%       -----------------------------------  :: Gen
%       Envin |- e : Sch -| Envout

%   defn Env |- Sch <= [ A ] Ty
%     :: :: Inst :: 'Inst'
%     {{ com Polymorhpic Type Instantiation }}
%     by

%       nolc Env
%       nolc Ty
%       ------------------------  :: Mono
%       Env |- Ty <= [bullet] Ty


%       exA fresh Env [[:FR]]
%       Env; <exA> |- [exA/skA] Sch <= [A] Ty [[:INST]]
%       --------------------------------------  :: Poly
%       Env |- forall skA . Sch <= [<exA> ++ A] Ty


%   defn Env1 |- Eqs -| Env2
%     :: :: U :: 'U'
%     {{ com Unification Algorithm }}
%     by

%       Envin |- Eqs -| Envout, Sub [[:Us]]
%       ----------------------------  :: U
%       Envin |- Eqs -| Envout

%   defn Envin |- Eqs -| Envout , Sub
%     :: :: Us :: 'Us'
%     {{ com Unification Algorithm with substutution }}
%     by

%       nolc Env
%       --------------------  :: Nil
%       Env |- bullet -| Env, bullet


%       Envin |- Eqs --> Env |- Eqs', Sub1 [[:UNI]]
%       Sub1 Env |- Sub1 Eqs' -| Envout, Sub2 [[:USS]]
%       ----------------------------  :: Cons
%       Envin |- Eqs -| Envout, Sub1 + Sub2

%   defn Env1 |- Eqs1 --> Env2 |- Eqs2 , Sub
%     :: :: Uss :: 'Uss'
%     {{ com Unification Algorithm (Single-step) }} {{ tex \begin{array}{l} [[Env1]] \vdash [[Eqs1]] \rightarrow \\ [[Env2]] \vdash [[Eqs2]], [[Sub]] \end{array} }}
%     by

%       nolc Env
%       ----------------------------------------  :: Unit
%       Env |- Unit sim Unit; Eqs --> Env |- Eqs, bullet


%       nolc Env
%       --------------------------------------  :: ExA
%       Env |- exA sim exA; Eqs --> Env |- Eqs, bullet


%       nolc Env
%       nolc Ty1
%       nolc Ty2
%       nolc Ty3
%       nolc Ty4
%       ----------------------------------------------------------------------------------  :: DistrArr
%       Env |- (Ty1 -> Ty2) sim (Ty3 -> Ty4); Eqs --> Env |- Ty1 sim Ty3; Ty2 sim Ty4; Eqs, bullet

%       nolc Ty1
%       nolc Ty2
%       nolc Env2
%       <exA1; exA2> # Env1; (A1; exA ++ A2) + Env2 [[:FR]]
%       ----------------------------------------------------------------------------------------  :: SplitL
%       Env1; (A1; exA ++ A2) + Env2 |- exA sim (Ty1 -> Ty2); Eqs --> Env1; (A1; exA1; exA2 ++ A2) + Env2 |- (exA1 -> exA2 sim Ty1 -> Ty2); Eqs, < [exA1 -> exA2/exA] >

%       nolc Ty1
%       nolc Ty2
%       nolc Env2
%       <exA1; exA2> # Env1; (A1; exA ++ A2) + Env2 [[:FR]]
%       ----------------------------------------------------------------------------------------  :: SplitR
%       Env1; (A1; exA ++ A2) + Env2 |- (Ty1 -> Ty2) sim exA; Eqs --> Env1; (A1; exA1; exA2 ++ A2) + Env2 |- (Ty1 -> Ty2 sim exA1 -> exA2 ); Eqs, <[exA1 -> exA2/exA]>

%       nolc Env2
%       exA elem Env1; A1
%       -------------------------------------------------------------  :: SubExL
%       Env1; (A1; exB ++ A2) + Env2 |- exA sim exB; Eqs --> Env1; (A1 ++ A2) + Env2 |- Eqs, <[exA/exB]>

%       nolc Env2
%       exA elem Env1; A1
%       -------------------------------------------------------------  :: SubExR
%       Env1; (A1; exB ++ A2) + Env2 |- exB sim exA; Eqs --> Env1; (A1 ++ A2) + Env2 |- Eqs, <[exA/exB]>


%       nolc Env2
%       ----------------------------------------------------------------  :: SubUnitAL
%       Env1; (A1; exA ++ A2) + Env2 |- Unit sim exA; Eqs --> Env1; (A1 ++ A2) + Env2 |- Eqs, <[Unit/exA]>


%       nolc Env2
%       ----------------------------------------------------------------  :: SubUnitAR
%       Env1; (A1; exA ++ A2) + Env2 |- exA sim Unit; Eqs --> Env1; (A1 ++ A2) + Env2 |- Eqs, <[Unit/exA]>


% defns WFAlgorithmic :: '' ::=

%     defn Env |-ty Sch
%       :: :: WfTy :: 'WfTy'
%       {{ com Type Well-formedness }}
%       by

%       skA elem Env [[:IN]]
%       ------------  :: Sk
%       Env |-ty skA


%       exA elem Env [[:IN]]
%       ------------  :: Ex
%       Env |-ty exA


%       nolc Env
%       -------------  :: Unit
%       Env |-ty Unit


%       Env |-ty Ty1 [[:WFTYt1]]
%       Env |-ty Ty2 [[:WFTYt2]]
%       -------------------  :: Arr
%       Env |-ty Ty1 -> Ty2


%       Env; skA |-ty Sch [[:WFTY]]
%       ------------------------  :: Abs
%       Env |-ty forall skA. Sch

%     defn wf ( Env )
%       :: :: WfEnv :: 'WfEnv'
%       {{ com Scoping/Typing Environment Well-formedness }}
%       {{ tex \widehat{\texttt{wf} }~([[Env]]) }}
%       by


%       ---------------  :: Nil
%       wf(bullet)


%       wf(Env) [[:WF]]
%       A # Env [[:FR]]
%       ---------------  :: A
%       wf(Env; A)


%       wf(Env) [[:WF]]
%       Env |-ty Sch [[:WFTY]]
%       ----------------  :: Sch
%       wf(Env; x : Sch)


%       wf(Env) [[:WF]]
%       A # Env [[:FR]]
%       Env; A |-ty Sch [[:WFTY]]
%       -------------------  :: ObjSch
%       wf(Env; { [A] Sch })


% defns EnvironmentInstantiation :: '' ::=

%   defn DEnvin , DSubin |- A ~> DA , DSub
%     :: :: AInst :: 'AInst'
%     {{ com A instantiation }}
%     by


%       nolc DEnv
%       ------------------------------------- :: Nil
%       DEnv, DSub |- bullet ~> bullet, bullet


%       DEnvin, DSubin |- A ~> DA1, DSub
%       DEnvin; DA1 ++ DA2 |-dty DTy [[:WFDTY]]
%       ------------------------------------- :: Cons
%       DEnvin, DSubin |- A; exA ~> (DA1 ++ DA2), DSub dot [ DTy / exA ]

%   defn DEnvin , DSubin |- Env ~> DEnv , DSub
%     :: :: EInst :: 'EInst'
%     {{ com Environment instantiation }}
%     by

%       nolc DEnv
%       ------------------------------------- :: Nil
%       DEnv, DSub |- bullet ~> bullet, bullet

%       DEnvin, DSubin |- Env ~> DEnv, DSub1 [[:INST]]
%       DEnvin + DEnv, DSubin + DSub1 |- A ~> DA, DSub2 [[:INSTA]]
%       ----------------------------------------------------  :: A
%       DEnvin, DSubin |- Env; A ~> DEnv; DA, DSub1 + DSub2


%       DEnvin, DSubin |- Env ~> DEnv, DSub [[:INST]]
%       DSch embedin (DSubin + DSub) Sch [[:EMB]]
%       ----------------------------------  :: Sch
%       DEnvin, DSubin |- Env; x : Sch ~> DEnv; x : DSch, DSub


%       DEnvin, DSubin |- Env ~> DEnv, DSub [[:INST]]
%       (DEnvin + DEnv), (DSubin + DSub) |- A ~> DA, DSub' [[:INSTA]]
%       DSch embedin (DSubin + (DSub + DSub')) Sch [[:EMB]]
%       ----------------------------------  :: ObjSch
%       DEnvin, DSubin |- Env; {[A] Sch} ~> DEnv; {[DA] DSch}, DSub

embed {{ coq
(* Local Variables: *)
(* company-coq-local-symbols: (("|=" . ?⊨) ("=|" . ?⫤) ("->>" . ?↠) ("=~" . ?≈) ("<|" . ?⟨) ("|>" . ?⟩)); *)
(* End: *)}}
